// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Roles roles
//
// swagger:model Roles
type Roles struct {

	// contact
	Contact *Contact `json:"contact,omitempty"`

	// districtadmin
	Districtadmin *DistrictAdmin `json:"districtadmin,omitempty"`

	// staff
	Staff *Staff `json:"staff,omitempty"`

	// student
	Student *Student `json:"student,omitempty"`

	// teacher
	Teacher *Teacher `json:"teacher,omitempty"`
}

// Validate validates this roles
func (m *Roles) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistrictadmin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStaff(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStudent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeacher(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Roles) validateContact(formats strfmt.Registry) error {
	if swag.IsZero(m.Contact) { // not required
		return nil
	}

	if m.Contact != nil {
		if err := m.Contact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact")
			}
			return err
		}
	}

	return nil
}

func (m *Roles) validateDistrictadmin(formats strfmt.Registry) error {
	if swag.IsZero(m.Districtadmin) { // not required
		return nil
	}

	if m.Districtadmin != nil {
		if err := m.Districtadmin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("districtadmin")
			}
			return err
		}
	}

	return nil
}

func (m *Roles) validateStaff(formats strfmt.Registry) error {
	if swag.IsZero(m.Staff) { // not required
		return nil
	}

	if m.Staff != nil {
		if err := m.Staff.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("staff")
			}
			return err
		}
	}

	return nil
}

func (m *Roles) validateStudent(formats strfmt.Registry) error {
	if swag.IsZero(m.Student) { // not required
		return nil
	}

	if m.Student != nil {
		if err := m.Student.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("student")
			}
			return err
		}
	}

	return nil
}

func (m *Roles) validateTeacher(formats strfmt.Registry) error {
	if swag.IsZero(m.Teacher) { // not required
		return nil
	}

	if m.Teacher != nil {
		if err := m.Teacher.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("teacher")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this roles based on the context it is used
func (m *Roles) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDistrictadmin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStaff(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStudent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeacher(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Roles) contextValidateContact(ctx context.Context, formats strfmt.Registry) error {

	if m.Contact != nil {
		if err := m.Contact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact")
			}
			return err
		}
	}

	return nil
}

func (m *Roles) contextValidateDistrictadmin(ctx context.Context, formats strfmt.Registry) error {

	if m.Districtadmin != nil {
		if err := m.Districtadmin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("districtadmin")
			}
			return err
		}
	}

	return nil
}

func (m *Roles) contextValidateStaff(ctx context.Context, formats strfmt.Registry) error {

	if m.Staff != nil {
		if err := m.Staff.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("staff")
			}
			return err
		}
	}

	return nil
}

func (m *Roles) contextValidateStudent(ctx context.Context, formats strfmt.Registry) error {

	if m.Student != nil {
		if err := m.Student.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("student")
			}
			return err
		}
	}

	return nil
}

func (m *Roles) contextValidateTeacher(ctx context.Context, formats strfmt.Registry) error {

	if m.Teacher != nil {
		if err := m.Teacher.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("teacher")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Roles) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Roles) UnmarshalBinary(b []byte) error {
	var res Roles
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
