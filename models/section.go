// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Section section
//
// swagger:model Section
type Section struct {

	// course
	Course *string `json:"course,omitempty"`

	// course name
	CourseName *string `json:"course_name,omitempty"`

	// created
	// Format: datetime
	Created strfmt.DateTime `json:"created,omitempty"`

	// district
	District string `json:"district,omitempty"`

	// ext
	Ext interface{} `json:"ext,omitempty"`

	// grade
	// Enum: [InfantToddler Preschool PreKindergarten TransitionalKindergarten Kindergarten 1 2 3 4 5 6 7 8 9 10 11 12 13 PostGraduate Ungraded Other ]
	Grade *string `json:"grade,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last modified
	// Format: datetime
	LastModified strfmt.DateTime `json:"last_modified,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// period
	Period *string `json:"period,omitempty"`

	// school
	School string `json:"school,omitempty"`

	// section number
	SectionNumber *string `json:"section_number,omitempty"`

	// sis id
	SisID string `json:"sis_id,omitempty"`

	// students
	Students []string `json:"students"`

	// subject
	// Enum: [english/language arts math science social studies language homeroom/advisory interventions/online learning technology and engineering PE and health arts and music other ]
	Subject *string `json:"subject,omitempty"`

	// teacher
	Teacher *string `json:"teacher,omitempty"`

	// teachers
	Teachers []string `json:"teachers"`

	// term id
	TermID *string `json:"term_id,omitempty"`

	// term name
	TermName *string `json:"term_name,omitempty"`
}

// Validate validates this section
func (m *Section) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Section) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "datetime", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

var sectionTypeGradePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["InfantToddler","Preschool","PreKindergarten","TransitionalKindergarten","Kindergarten","1","2","3","4","5","6","7","8","9","10","11","12","13","PostGraduate","Ungraded","Other",""]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sectionTypeGradePropEnum = append(sectionTypeGradePropEnum, v)
	}
}

const (

	// SectionGradeInfantToddler captures enum value "InfantToddler"
	SectionGradeInfantToddler string = "InfantToddler"

	// SectionGradePreschool captures enum value "Preschool"
	SectionGradePreschool string = "Preschool"

	// SectionGradePreKindergarten captures enum value "PreKindergarten"
	SectionGradePreKindergarten string = "PreKindergarten"

	// SectionGradeTransitionalKindergarten captures enum value "TransitionalKindergarten"
	SectionGradeTransitionalKindergarten string = "TransitionalKindergarten"

	// SectionGradeKindergarten captures enum value "Kindergarten"
	SectionGradeKindergarten string = "Kindergarten"

	// SectionGradeNr1 captures enum value "1"
	SectionGradeNr1 string = "1"

	// SectionGradeNr2 captures enum value "2"
	SectionGradeNr2 string = "2"

	// SectionGradeNr3 captures enum value "3"
	SectionGradeNr3 string = "3"

	// SectionGradeNr4 captures enum value "4"
	SectionGradeNr4 string = "4"

	// SectionGradeNr5 captures enum value "5"
	SectionGradeNr5 string = "5"

	// SectionGradeNr6 captures enum value "6"
	SectionGradeNr6 string = "6"

	// SectionGradeNr7 captures enum value "7"
	SectionGradeNr7 string = "7"

	// SectionGradeNr8 captures enum value "8"
	SectionGradeNr8 string = "8"

	// SectionGradeNr9 captures enum value "9"
	SectionGradeNr9 string = "9"

	// SectionGradeNr10 captures enum value "10"
	SectionGradeNr10 string = "10"

	// SectionGradeNr11 captures enum value "11"
	SectionGradeNr11 string = "11"

	// SectionGradeNr12 captures enum value "12"
	SectionGradeNr12 string = "12"

	// SectionGradeNr13 captures enum value "13"
	SectionGradeNr13 string = "13"

	// SectionGradePostGraduate captures enum value "PostGraduate"
	SectionGradePostGraduate string = "PostGraduate"

	// SectionGradeUngraded captures enum value "Ungraded"
	SectionGradeUngraded string = "Ungraded"

	// SectionGradeOther captures enum value "Other"
	SectionGradeOther string = "Other"

	// SectionGradeEmpty captures enum value ""
	SectionGradeEmpty string = ""
)

// prop value enum
func (m *Section) validateGradeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sectionTypeGradePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Section) validateGrade(formats strfmt.Registry) error {
	if swag.IsZero(m.Grade) { // not required
		return nil
	}

	// value enum
	if err := m.validateGradeEnum("grade", "body", *m.Grade); err != nil {
		return err
	}

	return nil
}

func (m *Section) validateLastModified(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified", "body", "datetime", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

var sectionTypeSubjectPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["english/language arts","math","science","social studies","language","homeroom/advisory","interventions/online learning","technology and engineering","PE and health","arts and music","other",""]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sectionTypeSubjectPropEnum = append(sectionTypeSubjectPropEnum, v)
	}
}

const (

	// SectionSubjectEnglishLanguageArts captures enum value "english/language arts"
	SectionSubjectEnglishLanguageArts string = "english/language arts"

	// SectionSubjectMath captures enum value "math"
	SectionSubjectMath string = "math"

	// SectionSubjectScience captures enum value "science"
	SectionSubjectScience string = "science"

	// SectionSubjectSocialStudies captures enum value "social studies"
	SectionSubjectSocialStudies string = "social studies"

	// SectionSubjectLanguage captures enum value "language"
	SectionSubjectLanguage string = "language"

	// SectionSubjectHomeroomAdvisory captures enum value "homeroom/advisory"
	SectionSubjectHomeroomAdvisory string = "homeroom/advisory"

	// SectionSubjectInterventionsOnlineLearning captures enum value "interventions/online learning"
	SectionSubjectInterventionsOnlineLearning string = "interventions/online learning"

	// SectionSubjectTechnologyAndEngineering captures enum value "technology and engineering"
	SectionSubjectTechnologyAndEngineering string = "technology and engineering"

	// SectionSubjectPEAndHealth captures enum value "PE and health"
	SectionSubjectPEAndHealth string = "PE and health"

	// SectionSubjectArtsAndMusic captures enum value "arts and music"
	SectionSubjectArtsAndMusic string = "arts and music"

	// SectionSubjectOther captures enum value "other"
	SectionSubjectOther string = "other"

	// SectionSubjectEmpty captures enum value ""
	SectionSubjectEmpty string = ""
)

// prop value enum
func (m *Section) validateSubjectEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sectionTypeSubjectPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Section) validateSubject(formats strfmt.Registry) error {
	if swag.IsZero(m.Subject) { // not required
		return nil
	}

	// value enum
	if err := m.validateSubjectEnum("subject", "body", *m.Subject); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this section based on context it is used
func (m *Section) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Section) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Section) UnmarshalBinary(b []byte) error {
	var res Section
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
