// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// District district
//
// swagger:model District
type District struct {

	// district contact
	DistrictContact string `json:"district_contact,omitempty"`

	// error
	Error string `json:"error,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last sync
	// Format: datetime
	LastSync *strfmt.DateTime `json:"last_sync,omitempty"`

	// launch date
	// Format: datetime
	LaunchDate strfmt.DateTime `json:"launch_date,omitempty"`

	// login methods
	LoginMethods []string `json:"login_methods"`

	// mdr number
	MdrNumber *string `json:"mdr_number,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// nces id
	NcesID *string `json:"nces_id,omitempty"`

	// pause end
	// Format: datetime
	PauseEnd *strfmt.DateTime `json:"pause_end,omitempty"`

	// pause start
	// Format: datetime
	PauseStart *strfmt.DateTime `json:"pause_start,omitempty"`

	// portal url
	PortalURL string `json:"portal_url,omitempty"`

	// sis type
	SisType string `json:"sis_type,omitempty"`

	// state
	// Enum: [running pending error paused  success]
	State *string `json:"state,omitempty"`
}

// Validate validates this district
func (m *District) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastSync(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLaunchDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePauseEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePauseStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *District) validateLastSync(formats strfmt.Registry) error {
	if swag.IsZero(m.LastSync) { // not required
		return nil
	}

	if err := validate.FormatOf("last_sync", "body", "datetime", m.LastSync.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *District) validateLaunchDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LaunchDate) { // not required
		return nil
	}

	if err := validate.FormatOf("launch_date", "body", "datetime", m.LaunchDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *District) validatePauseEnd(formats strfmt.Registry) error {
	if swag.IsZero(m.PauseEnd) { // not required
		return nil
	}

	if err := validate.FormatOf("pause_end", "body", "datetime", m.PauseEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *District) validatePauseStart(formats strfmt.Registry) error {
	if swag.IsZero(m.PauseStart) { // not required
		return nil
	}

	if err := validate.FormatOf("pause_start", "body", "datetime", m.PauseStart.String(), formats); err != nil {
		return err
	}

	return nil
}

var districtTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["running","pending","error","paused","","success"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		districtTypeStatePropEnum = append(districtTypeStatePropEnum, v)
	}
}

const (

	// DistrictStateRunning captures enum value "running"
	DistrictStateRunning string = "running"

	// DistrictStatePending captures enum value "pending"
	DistrictStatePending string = "pending"

	// DistrictStateError captures enum value "error"
	DistrictStateError string = "error"

	// DistrictStatePaused captures enum value "paused"
	DistrictStatePaused string = "paused"

	// DistrictStateEmpty captures enum value ""
	DistrictStateEmpty string = ""

	// DistrictStateSuccess captures enum value "success"
	DistrictStateSuccess string = "success"
)

// prop value enum
func (m *District) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, districtTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *District) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this district based on context it is used
func (m *District) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *District) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *District) UnmarshalBinary(b []byte) error {
	var res District
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
