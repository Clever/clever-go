// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// School school
//
// swagger:model School
type School struct {

	// created
	// Format: datetime
	Created strfmt.DateTime `json:"created,omitempty"`

	// district
	District string `json:"district,omitempty"`

	// ext
	Ext interface{} `json:"ext,omitempty"`

	// high grade
	// Enum: [InfantToddler Preschool PreKindergarten TransitionalKindergarten Kindergarten 1 2 3 4 5 6 7 8 9 10 11 12 13 PostGraduate Ungraded Other ]
	HighGrade *string `json:"high_grade,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last modified
	// Format: datetime
	LastModified strfmt.DateTime `json:"last_modified,omitempty"`

	// location
	Location *Location `json:"location,omitempty"`

	// low grade
	// Enum: [InfantToddler Preschool PreKindergarten TransitionalKindergarten Kindergarten 1 2 3 4 5 6 7 8 9 10 11 12 13 PostGraduate Ungraded Other ]
	LowGrade *string `json:"low_grade,omitempty"`

	// mdr number
	MdrNumber *string `json:"mdr_number,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// nces id
	NcesID *string `json:"nces_id,omitempty"`

	// phone
	Phone *string `json:"phone,omitempty"`

	// principal
	Principal *Principal `json:"principal,omitempty"`

	// school number
	SchoolNumber string `json:"school_number,omitempty"`

	// sis id
	SisID string `json:"sis_id,omitempty"`

	// state id
	StateID *string `json:"state_id,omitempty"`
}

// Validate validates this school
func (m *School) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHighGrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLowGrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrincipal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *School) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "datetime", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

var schoolTypeHighGradePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["InfantToddler","Preschool","PreKindergarten","TransitionalKindergarten","Kindergarten","1","2","3","4","5","6","7","8","9","10","11","12","13","PostGraduate","Ungraded","Other",""]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		schoolTypeHighGradePropEnum = append(schoolTypeHighGradePropEnum, v)
	}
}

const (

	// SchoolHighGradeInfantToddler captures enum value "InfantToddler"
	SchoolHighGradeInfantToddler string = "InfantToddler"

	// SchoolHighGradePreschool captures enum value "Preschool"
	SchoolHighGradePreschool string = "Preschool"

	// SchoolHighGradePreKindergarten captures enum value "PreKindergarten"
	SchoolHighGradePreKindergarten string = "PreKindergarten"

	// SchoolHighGradeTransitionalKindergarten captures enum value "TransitionalKindergarten"
	SchoolHighGradeTransitionalKindergarten string = "TransitionalKindergarten"

	// SchoolHighGradeKindergarten captures enum value "Kindergarten"
	SchoolHighGradeKindergarten string = "Kindergarten"

	// SchoolHighGradeNr1 captures enum value "1"
	SchoolHighGradeNr1 string = "1"

	// SchoolHighGradeNr2 captures enum value "2"
	SchoolHighGradeNr2 string = "2"

	// SchoolHighGradeNr3 captures enum value "3"
	SchoolHighGradeNr3 string = "3"

	// SchoolHighGradeNr4 captures enum value "4"
	SchoolHighGradeNr4 string = "4"

	// SchoolHighGradeNr5 captures enum value "5"
	SchoolHighGradeNr5 string = "5"

	// SchoolHighGradeNr6 captures enum value "6"
	SchoolHighGradeNr6 string = "6"

	// SchoolHighGradeNr7 captures enum value "7"
	SchoolHighGradeNr7 string = "7"

	// SchoolHighGradeNr8 captures enum value "8"
	SchoolHighGradeNr8 string = "8"

	// SchoolHighGradeNr9 captures enum value "9"
	SchoolHighGradeNr9 string = "9"

	// SchoolHighGradeNr10 captures enum value "10"
	SchoolHighGradeNr10 string = "10"

	// SchoolHighGradeNr11 captures enum value "11"
	SchoolHighGradeNr11 string = "11"

	// SchoolHighGradeNr12 captures enum value "12"
	SchoolHighGradeNr12 string = "12"

	// SchoolHighGradeNr13 captures enum value "13"
	SchoolHighGradeNr13 string = "13"

	// SchoolHighGradePostGraduate captures enum value "PostGraduate"
	SchoolHighGradePostGraduate string = "PostGraduate"

	// SchoolHighGradeUngraded captures enum value "Ungraded"
	SchoolHighGradeUngraded string = "Ungraded"

	// SchoolHighGradeOther captures enum value "Other"
	SchoolHighGradeOther string = "Other"

	// SchoolHighGradeEmpty captures enum value ""
	SchoolHighGradeEmpty string = ""
)

// prop value enum
func (m *School) validateHighGradeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, schoolTypeHighGradePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *School) validateHighGrade(formats strfmt.Registry) error {
	if swag.IsZero(m.HighGrade) { // not required
		return nil
	}

	// value enum
	if err := m.validateHighGradeEnum("high_grade", "body", *m.HighGrade); err != nil {
		return err
	}

	return nil
}

func (m *School) validateLastModified(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if err := validate.FormatOf("last_modified", "body", "datetime", m.LastModified.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *School) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

var schoolTypeLowGradePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["InfantToddler","Preschool","PreKindergarten","TransitionalKindergarten","Kindergarten","1","2","3","4","5","6","7","8","9","10","11","12","13","PostGraduate","Ungraded","Other",""]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		schoolTypeLowGradePropEnum = append(schoolTypeLowGradePropEnum, v)
	}
}

const (

	// SchoolLowGradeInfantToddler captures enum value "InfantToddler"
	SchoolLowGradeInfantToddler string = "InfantToddler"

	// SchoolLowGradePreschool captures enum value "Preschool"
	SchoolLowGradePreschool string = "Preschool"

	// SchoolLowGradePreKindergarten captures enum value "PreKindergarten"
	SchoolLowGradePreKindergarten string = "PreKindergarten"

	// SchoolLowGradeTransitionalKindergarten captures enum value "TransitionalKindergarten"
	SchoolLowGradeTransitionalKindergarten string = "TransitionalKindergarten"

	// SchoolLowGradeKindergarten captures enum value "Kindergarten"
	SchoolLowGradeKindergarten string = "Kindergarten"

	// SchoolLowGradeNr1 captures enum value "1"
	SchoolLowGradeNr1 string = "1"

	// SchoolLowGradeNr2 captures enum value "2"
	SchoolLowGradeNr2 string = "2"

	// SchoolLowGradeNr3 captures enum value "3"
	SchoolLowGradeNr3 string = "3"

	// SchoolLowGradeNr4 captures enum value "4"
	SchoolLowGradeNr4 string = "4"

	// SchoolLowGradeNr5 captures enum value "5"
	SchoolLowGradeNr5 string = "5"

	// SchoolLowGradeNr6 captures enum value "6"
	SchoolLowGradeNr6 string = "6"

	// SchoolLowGradeNr7 captures enum value "7"
	SchoolLowGradeNr7 string = "7"

	// SchoolLowGradeNr8 captures enum value "8"
	SchoolLowGradeNr8 string = "8"

	// SchoolLowGradeNr9 captures enum value "9"
	SchoolLowGradeNr9 string = "9"

	// SchoolLowGradeNr10 captures enum value "10"
	SchoolLowGradeNr10 string = "10"

	// SchoolLowGradeNr11 captures enum value "11"
	SchoolLowGradeNr11 string = "11"

	// SchoolLowGradeNr12 captures enum value "12"
	SchoolLowGradeNr12 string = "12"

	// SchoolLowGradeNr13 captures enum value "13"
	SchoolLowGradeNr13 string = "13"

	// SchoolLowGradePostGraduate captures enum value "PostGraduate"
	SchoolLowGradePostGraduate string = "PostGraduate"

	// SchoolLowGradeUngraded captures enum value "Ungraded"
	SchoolLowGradeUngraded string = "Ungraded"

	// SchoolLowGradeOther captures enum value "Other"
	SchoolLowGradeOther string = "Other"

	// SchoolLowGradeEmpty captures enum value ""
	SchoolLowGradeEmpty string = ""
)

// prop value enum
func (m *School) validateLowGradeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, schoolTypeLowGradePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *School) validateLowGrade(formats strfmt.Registry) error {
	if swag.IsZero(m.LowGrade) { // not required
		return nil
	}

	// value enum
	if err := m.validateLowGradeEnum("low_grade", "body", *m.LowGrade); err != nil {
		return err
	}

	return nil
}

func (m *School) validatePrincipal(formats strfmt.Registry) error {
	if swag.IsZero(m.Principal) { // not required
		return nil
	}

	if m.Principal != nil {
		if err := m.Principal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("principal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("principal")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this school based on the context it is used
func (m *School) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrincipal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *School) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {

		if swag.IsZero(m.Location) { // not required
			return nil
		}

		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *School) contextValidatePrincipal(ctx context.Context, formats strfmt.Registry) error {

	if m.Principal != nil {

		if swag.IsZero(m.Principal) { // not required
			return nil
		}

		if err := m.Principal.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("principal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("principal")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *School) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *School) UnmarshalBinary(b []byte) error {
	var res School
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
