// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Contact contact
//
// swagger:model Contact
type Contact struct {

	// legacy id
	LegacyID string `json:"legacy_id,omitempty"`

	// phone
	Phone *string `json:"phone,omitempty"`

	// phone type
	// Enum: [Cell Home Work Other ]
	PhoneType *string `json:"phone_type,omitempty"`

	// sis id
	SisID *string `json:"sis_id,omitempty"`

	// student relationships
	StudentRelationships []*StudentRelationship `json:"student_relationships"`
}

// Validate validates this contact
func (m *Contact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePhoneType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStudentRelationships(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var contactTypePhoneTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Cell","Home","Work","Other",""]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contactTypePhoneTypePropEnum = append(contactTypePhoneTypePropEnum, v)
	}
}

const (

	// ContactPhoneTypeCell captures enum value "Cell"
	ContactPhoneTypeCell string = "Cell"

	// ContactPhoneTypeHome captures enum value "Home"
	ContactPhoneTypeHome string = "Home"

	// ContactPhoneTypeWork captures enum value "Work"
	ContactPhoneTypeWork string = "Work"

	// ContactPhoneTypeOther captures enum value "Other"
	ContactPhoneTypeOther string = "Other"

	// ContactPhoneTypeEmpty captures enum value ""
	ContactPhoneTypeEmpty string = ""
)

// prop value enum
func (m *Contact) validatePhoneTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, contactTypePhoneTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Contact) validatePhoneType(formats strfmt.Registry) error {
	if swag.IsZero(m.PhoneType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePhoneTypeEnum("phone_type", "body", *m.PhoneType); err != nil {
		return err
	}

	return nil
}

func (m *Contact) validateStudentRelationships(formats strfmt.Registry) error {
	if swag.IsZero(m.StudentRelationships) { // not required
		return nil
	}

	for i := 0; i < len(m.StudentRelationships); i++ {
		if swag.IsZero(m.StudentRelationships[i]) { // not required
			continue
		}

		if m.StudentRelationships[i] != nil {
			if err := m.StudentRelationships[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("student_relationships" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("student_relationships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this contact based on the context it is used
func (m *Contact) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStudentRelationships(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Contact) contextValidateStudentRelationships(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StudentRelationships); i++ {

		if m.StudentRelationships[i] != nil {

			if swag.IsZero(m.StudentRelationships[i]) { // not required
				return nil
			}

			if err := m.StudentRelationships[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("student_relationships" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("student_relationships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Contact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Contact) UnmarshalBinary(b []byte) error {
	var res Contact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
