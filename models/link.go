// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Link link
//
// swagger:model Link
type Link struct {

	// rel
	// Enum: [next prev self]
	Rel string `json:"rel,omitempty"`

	// uri
	URI string `json:"uri,omitempty"`
}

// Validate validates this link
func (m *Link) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var linkTypeRelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["next","prev","self"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		linkTypeRelPropEnum = append(linkTypeRelPropEnum, v)
	}
}

const (

	// LinkRelNext captures enum value "next"
	LinkRelNext string = "next"

	// LinkRelPrev captures enum value "prev"
	LinkRelPrev string = "prev"

	// LinkRelSelf captures enum value "self"
	LinkRelSelf string = "self"
)

// prop value enum
func (m *Link) validateRelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, linkTypeRelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Link) validateRel(formats strfmt.Registry) error {
	if swag.IsZero(m.Rel) { // not required
		return nil
	}

	// value enum
	if err := m.validateRelEnum("rel", "body", m.Rel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this link based on context it is used
func (m *Link) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Link) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Link) UnmarshalBinary(b []byte) error {
	var res Link
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
