// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Event event
//
// swagger:discriminator Event type
type Event interface {
	runtime.Validatable
	runtime.ContextValidatable

	// created
	// Format: datetime
	Created() strfmt.DateTime
	SetCreated(strfmt.DateTime)

	// id
	ID() string
	SetID(string)

	// type
	// Required: true
	Type() string
	SetType(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type event struct {
	createdField strfmt.DateTime

	idField string

	typeField string
}

// Created gets the created of this polymorphic type
func (m *event) Created() strfmt.DateTime {
	return m.createdField
}

// SetCreated sets the created of this polymorphic type
func (m *event) SetCreated(val strfmt.DateTime) {
	m.createdField = val
}

// ID gets the id of this polymorphic type
func (m *event) ID() string {
	return m.idField
}

// SetID sets the id of this polymorphic type
func (m *event) SetID(val string) {
	m.idField = val
}

// Type gets the type of this polymorphic type
func (m *event) Type() string {
	return "Event"
}

// SetType sets the type of this polymorphic type
func (m *event) SetType(val string) {
}

// UnmarshalEventSlice unmarshals polymorphic slices of Event
func UnmarshalEventSlice(reader io.Reader, consumer runtime.Consumer) ([]Event, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Event
	for _, element := range elements {
		obj, err := unmarshalEvent(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalEvent unmarshals polymorphic Event
func UnmarshalEvent(reader io.Reader, consumer runtime.Consumer) (Event, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalEvent(data, consumer)
}

func unmarshalEvent(data []byte, consumer runtime.Consumer) (Event, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the type property.
	var getType struct {
		Type string `json:"type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("type", "body", getType.Type); err != nil {
		return nil, err
	}

	// The value of type is used to determine which type to create and unmarshal the data into
	switch getType.Type {
	case "Event":
		var result event
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "courses.created":
		var result CoursesCreated
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "courses.deleted":
		var result CoursesDeleted
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "courses.updated":
		var result CoursesUpdated
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "districts.created":
		var result DistrictsCreated
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "districts.deleted":
		var result DistrictsDeleted
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "districts.updated":
		var result DistrictsUpdated
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "resources.created":
		var result ResourcesCreated
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "resources.deleted":
		var result ResourcesDeleted
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "resources.updated":
		var result ResourcesUpdated
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "schools.created":
		var result SchoolsCreated
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "schools.deleted":
		var result SchoolsDeleted
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "schools.updated":
		var result SchoolsUpdated
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "sections.created":
		var result SectionsCreated
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "sections.deleted":
		var result SectionsDeleted
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "sections.updated":
		var result SectionsUpdated
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "terms.created":
		var result TermsCreated
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "terms.deleted":
		var result TermsDeleted
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "terms.updated":
		var result TermsUpdated
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "users.created":
		var result UsersCreated
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "users.deleted":
		var result UsersDeleted
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "users.updated":
		var result UsersUpdated
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid type value: %q", getType.Type)
}

// Validate validates this event
func (m *event) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *event) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created()) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "datetime", m.Created().String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this event based on context it is used
func (m *event) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
