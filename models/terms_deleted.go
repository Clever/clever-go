// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TermsDeleted terms deleted
//
// swagger:model terms.deleted
type TermsDeleted struct {
	createdField strfmt.DateTime

	idField string

	// data
	Data *TermObject `json:"data,omitempty"`
}

// Created gets the created of this subtype
func (m *TermsDeleted) Created() strfmt.DateTime {
	return m.createdField
}

// SetCreated sets the created of this subtype
func (m *TermsDeleted) SetCreated(val strfmt.DateTime) {
	m.createdField = val
}

// ID gets the id of this subtype
func (m *TermsDeleted) ID() string {
	return m.idField
}

// SetID sets the id of this subtype
func (m *TermsDeleted) SetID(val string) {
	m.idField = val
}

// Type gets the type of this subtype
func (m *TermsDeleted) Type() string {
	return "terms.deleted"
}

// SetType sets the type of this subtype
func (m *TermsDeleted) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *TermsDeleted) UnmarshalJSON(raw []byte) error {
	var data struct {

		// data
		Data *TermObject `json:"data,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Created strfmt.DateTime `json:"created,omitempty"`

		ID string `json:"id,omitempty"`

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result TermsDeleted

	result.createdField = base.Created

	result.idField = base.ID

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.Data = data.Data

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m TermsDeleted) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// data
		Data *TermObject `json:"data,omitempty"`
	}{

		Data: m.Data,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Created strfmt.DateTime `json:"created,omitempty"`

		ID string `json:"id,omitempty"`

		Type string `json:"type"`
	}{

		Created: m.Created(),

		ID: m.ID(),

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this terms deleted
func (m *TermsDeleted) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TermsDeleted) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created()) { // not required
		return nil
	}

	if err := validate.FormatOf("created", "body", "datetime", m.Created().String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TermsDeleted) validateData(formats strfmt.Registry) error {

	if swag.IsZero(m.Data) { // not required
		return nil
	}

	if m.Data != nil {
		if err := m.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this terms deleted based on the context it is used
func (m *TermsDeleted) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TermsDeleted) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if m.Data != nil {
		if err := m.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TermsDeleted) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TermsDeleted) UnmarshalBinary(b []byte) error {
	var res TermsDeleted
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
