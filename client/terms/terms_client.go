// Code generated by go-swagger; DO NOT EDIT.

package terms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new terms API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for terms API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetDistrictForTerm(params *GetDistrictForTermParams, authInfo runtime.ClientAuthInfoWriter) (*GetDistrictForTermOK, error)

	GetSchoolsForTerm(params *GetSchoolsForTermParams, authInfo runtime.ClientAuthInfoWriter) (*GetSchoolsForTermOK, error)

	GetSectionsForTerm(params *GetSectionsForTermParams, authInfo runtime.ClientAuthInfoWriter) (*GetSectionsForTermOK, error)

	GetTerm(params *GetTermParams, authInfo runtime.ClientAuthInfoWriter) (*GetTermOK, error)

	GetTerms(params *GetTermsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTermsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetDistrictForTerm Returns the district for a term
*/
func (a *Client) GetDistrictForTerm(params *GetDistrictForTermParams, authInfo runtime.ClientAuthInfoWriter) (*GetDistrictForTermOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistrictForTermParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDistrictForTerm",
		Method:             "GET",
		PathPattern:        "/terms/{id}/district",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDistrictForTermReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDistrictForTermOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDistrictForTerm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSchoolsForTerm Returns the schools for a term
*/
func (a *Client) GetSchoolsForTerm(params *GetSchoolsForTermParams, authInfo runtime.ClientAuthInfoWriter) (*GetSchoolsForTermOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchoolsForTermParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSchoolsForTerm",
		Method:             "GET",
		PathPattern:        "/terms/{id}/schools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSchoolsForTermReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSchoolsForTermOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSchoolsForTerm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSectionsForTerm Returns the sections for a term
*/
func (a *Client) GetSectionsForTerm(params *GetSectionsForTermParams, authInfo runtime.ClientAuthInfoWriter) (*GetSectionsForTermOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSectionsForTermParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSectionsForTerm",
		Method:             "GET",
		PathPattern:        "/terms/{id}/sections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSectionsForTermReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSectionsForTermOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSectionsForTerm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTerm Returns a specific term
*/
func (a *Client) GetTerm(params *GetTermParams, authInfo runtime.ClientAuthInfoWriter) (*GetTermOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTermParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTerm",
		Method:             "GET",
		PathPattern:        "/terms/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTermReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTermOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTerm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTerms Returns a list of terms
*/
func (a *Client) GetTerms(params *GetTermsParams, authInfo runtime.ClientAuthInfoWriter) (*GetTermsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTermsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTerms",
		Method:             "GET",
		PathPattern:        "/terms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTermsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTermsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTerms: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
