// Code generated by go-swagger; DO NOT EDIT.

package terms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Clever/clever-go/models"
)

// GetTermReader is a Reader for the GetTerm structure.
type GetTermReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTermReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTermOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetTermNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTermOK creates a GetTermOK with default headers values
func NewGetTermOK() *GetTermOK {
	return &GetTermOK{}
}

/*
	GetTermOK describes a response with status code 200, with default header values.

OK Response
*/
type GetTermOK struct {
	Payload *models.TermResponse
}

func (o *GetTermOK) Error() string {
	return fmt.Sprintf("[GET /terms/{id}][%d] getTermOK  %+v", 200, o.Payload)
}
func (o *GetTermOK) GetPayload() *models.TermResponse {
	return o.Payload
}

func (o *GetTermOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TermResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTermNotFound creates a GetTermNotFound with default headers values
func NewGetTermNotFound() *GetTermNotFound {
	return &GetTermNotFound{}
}

/*
	GetTermNotFound describes a response with status code 404, with default header values.

Entity Not Found
*/
type GetTermNotFound struct {
	Payload *models.NotFound
}

func (o *GetTermNotFound) Error() string {
	return fmt.Sprintf("[GET /terms/{id}][%d] getTermNotFound  %+v", 404, o.Payload)
}
func (o *GetTermNotFound) GetPayload() *models.NotFound {
	return o.Payload
}

func (o *GetTermNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
