// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Clever/clever-go/models"
)

// GetEventReader is a Reader for the GetEvent structure.
type GetEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEventOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetEventNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /events/{id}] getEvent", response, response.Code())
	}
}

// NewGetEventOK creates a GetEventOK with default headers values
func NewGetEventOK() *GetEventOK {
	return &GetEventOK{}
}

/*
GetEventOK describes a response with status code 200, with default header values.

OK Response
*/
type GetEventOK struct {
	Payload *models.EventResponse
}

// IsSuccess returns true when this get event o k response has a 2xx status code
func (o *GetEventOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get event o k response has a 3xx status code
func (o *GetEventOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get event o k response has a 4xx status code
func (o *GetEventOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get event o k response has a 5xx status code
func (o *GetEventOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get event o k response a status code equal to that given
func (o *GetEventOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get event o k response
func (o *GetEventOK) Code() int {
	return 200
}

func (o *GetEventOK) Error() string {
	return fmt.Sprintf("[GET /events/{id}][%d] getEventOK  %+v", 200, o.Payload)
}

func (o *GetEventOK) String() string {
	return fmt.Sprintf("[GET /events/{id}][%d] getEventOK  %+v", 200, o.Payload)
}

func (o *GetEventOK) GetPayload() *models.EventResponse {
	return o.Payload
}

func (o *GetEventOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EventResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventNotFound creates a GetEventNotFound with default headers values
func NewGetEventNotFound() *GetEventNotFound {
	return &GetEventNotFound{}
}

/*
GetEventNotFound describes a response with status code 404, with default header values.

Entity Not Found
*/
type GetEventNotFound struct {
	Payload *models.NotFound
}

// IsSuccess returns true when this get event not found response has a 2xx status code
func (o *GetEventNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get event not found response has a 3xx status code
func (o *GetEventNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get event not found response has a 4xx status code
func (o *GetEventNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get event not found response has a 5xx status code
func (o *GetEventNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get event not found response a status code equal to that given
func (o *GetEventNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get event not found response
func (o *GetEventNotFound) Code() int {
	return 404
}

func (o *GetEventNotFound) Error() string {
	return fmt.Sprintf("[GET /events/{id}][%d] getEventNotFound  %+v", 404, o.Payload)
}

func (o *GetEventNotFound) String() string {
	return fmt.Sprintf("[GET /events/{id}][%d] getEventNotFound  %+v", 404, o.Payload)
}

func (o *GetEventNotFound) GetPayload() *models.NotFound {
	return o.Payload
}

func (o *GetEventNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
