// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new resources API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for resources API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetCoursesForResource(params *GetCoursesForResourceParams, authInfo runtime.ClientAuthInfoWriter) (*GetCoursesForResourceOK, error)

	GetResource(params *GetResourceParams, authInfo runtime.ClientAuthInfoWriter) (*GetResourceOK, error)

	GetResources(params *GetResourcesParams, authInfo runtime.ClientAuthInfoWriter) (*GetResourcesOK, error)

	GetSectionsForResource(params *GetSectionsForResourceParams, authInfo runtime.ClientAuthInfoWriter) (*GetSectionsForResourceOK, error)

	GetUsersForResource(params *GetUsersForResourceParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersForResourceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetCoursesForResource Returns the courses for a resource
*/
func (a *Client) GetCoursesForResource(params *GetCoursesForResourceParams, authInfo runtime.ClientAuthInfoWriter) (*GetCoursesForResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCoursesForResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCoursesForResource",
		Method:             "GET",
		PathPattern:        "/resources/{id}/courses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCoursesForResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCoursesForResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCoursesForResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResource Returns a specific resource
*/
func (a *Client) GetResource(params *GetResourceParams, authInfo runtime.ClientAuthInfoWriter) (*GetResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResource",
		Method:             "GET",
		PathPattern:        "/resources/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResources Returns a list of resources
*/
func (a *Client) GetResources(params *GetResourcesParams, authInfo runtime.ClientAuthInfoWriter) (*GetResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResources",
		Method:             "GET",
		PathPattern:        "/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSectionsForResource Returns the sections for a resource
*/
func (a *Client) GetSectionsForResource(params *GetSectionsForResourceParams, authInfo runtime.ClientAuthInfoWriter) (*GetSectionsForResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSectionsForResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSectionsForResource",
		Method:             "GET",
		PathPattern:        "/resources/{id}/sections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSectionsForResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSectionsForResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSectionsForResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUsersForResource Returns the student and/or teacher users for a resource
*/
func (a *Client) GetUsersForResource(params *GetUsersForResourceParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersForResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersForResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsersForResource",
		Method:             "GET",
		PathPattern:        "/resources/{id}/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersForResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersForResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsersForResource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
