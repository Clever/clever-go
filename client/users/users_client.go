// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetContactsForUser(params *GetContactsForUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetContactsForUserOK, error)

	GetDistrictForUser(params *GetDistrictForUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetDistrictForUserOK, error)

	GetResourcesForUser(params *GetResourcesForUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetResourcesForUserOK, error)

	GetSchoolsForUser(params *GetSchoolsForUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetSchoolsForUserOK, error)

	GetSectionsForUser(params *GetSectionsForUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetSectionsForUserOK, error)

	GetStudentsForUser(params *GetStudentsForUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetStudentsForUserOK, error)

	GetTeachersForUser(params *GetTeachersForUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeachersForUserOK, error)

	GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserOK, error)

	GetUsers(params *GetUsersParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetContactsForUser Returns the contact users for a student user
*/
func (a *Client) GetContactsForUser(params *GetContactsForUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetContactsForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContactsForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContactsForUser",
		Method:             "GET",
		PathPattern:        "/users/{id}/mycontacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContactsForUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContactsForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getContactsForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDistrictForUser Returns the district for a user
*/
func (a *Client) GetDistrictForUser(params *GetDistrictForUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetDistrictForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistrictForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDistrictForUser",
		Method:             "GET",
		PathPattern:        "/users/{id}/district",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDistrictForUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDistrictForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDistrictForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetResourcesForUser Returns the resources for a user
*/
func (a *Client) GetResourcesForUser(params *GetResourcesForUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetResourcesForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourcesForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResourcesForUser",
		Method:             "GET",
		PathPattern:        "/users/{id}/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourcesForUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourcesForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourcesForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSchoolsForUser Returns the schools for a user
*/
func (a *Client) GetSchoolsForUser(params *GetSchoolsForUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetSchoolsForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchoolsForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSchoolsForUser",
		Method:             "GET",
		PathPattern:        "/users/{id}/schools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSchoolsForUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSchoolsForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSchoolsForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSectionsForUser Returns the sections for a user
*/
func (a *Client) GetSectionsForUser(params *GetSectionsForUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetSectionsForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSectionsForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSectionsForUser",
		Method:             "GET",
		PathPattern:        "/users/{id}/sections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSectionsForUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSectionsForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSectionsForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStudentsForUser Returns the student users for a teacher or contact user
*/
func (a *Client) GetStudentsForUser(params *GetStudentsForUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetStudentsForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStudentsForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStudentsForUser",
		Method:             "GET",
		PathPattern:        "/users/{id}/mystudents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStudentsForUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStudentsForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getStudentsForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTeachersForUser Returns the teacher users for a student user
*/
func (a *Client) GetTeachersForUser(params *GetTeachersForUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetTeachersForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTeachersForUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTeachersForUser",
		Method:             "GET",
		PathPattern:        "/users/{id}/myteachers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTeachersForUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTeachersForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTeachersForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUser Returns a specific user
*/
func (a *Client) GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUser",
		Method:             "GET",
		PathPattern:        "/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUsers Returns a list of contact, district admin, staff, student, and/or teacher users
*/
func (a *Client) GetUsers(params *GetUsersParams, authInfo runtime.ClientAuthInfoWriter) (*GetUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUsers",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
