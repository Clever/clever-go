// Code generated by go-swagger; DO NOT EDIT.

package courses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new courses API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for courses API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetCourse(params *GetCourseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCourseOK, error)

	GetCourses(params *GetCoursesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCoursesOK, error)

	GetDistrictForCourse(params *GetDistrictForCourseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDistrictForCourseOK, error)

	GetResourcesForCourse(params *GetResourcesForCourseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourcesForCourseOK, error)

	GetSchoolsForCourse(params *GetSchoolsForCourseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSchoolsForCourseOK, error)

	GetSectionsForCourse(params *GetSectionsForCourseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSectionsForCourseOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetCourse Returns a specific course
*/
func (a *Client) GetCourse(params *GetCourseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCourseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCourseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCourse",
		Method:             "GET",
		PathPattern:        "/courses/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCourseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCourseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCourse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCourses Returns a list of courses
*/
func (a *Client) GetCourses(params *GetCoursesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCoursesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCoursesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCourses",
		Method:             "GET",
		PathPattern:        "/courses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCoursesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCoursesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCourses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDistrictForCourse Returns the district for a course
*/
func (a *Client) GetDistrictForCourse(params *GetDistrictForCourseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDistrictForCourseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistrictForCourseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDistrictForCourse",
		Method:             "GET",
		PathPattern:        "/courses/{id}/district",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDistrictForCourseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDistrictForCourseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDistrictForCourse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetResourcesForCourse Returns the resources for a course
*/
func (a *Client) GetResourcesForCourse(params *GetResourcesForCourseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResourcesForCourseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourcesForCourseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResourcesForCourse",
		Method:             "GET",
		PathPattern:        "/courses/{id}/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResourcesForCourseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResourcesForCourseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getResourcesForCourse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSchoolsForCourse Returns the schools for a course
*/
func (a *Client) GetSchoolsForCourse(params *GetSchoolsForCourseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSchoolsForCourseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSchoolsForCourseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSchoolsForCourse",
		Method:             "GET",
		PathPattern:        "/courses/{id}/schools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSchoolsForCourseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSchoolsForCourseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSchoolsForCourse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSectionsForCourse Returns the sections for a course
*/
func (a *Client) GetSectionsForCourse(params *GetSectionsForCourseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSectionsForCourseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSectionsForCourseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSectionsForCourse",
		Method:             "GET",
		PathPattern:        "/courses/{id}/sections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSectionsForCourseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSectionsForCourseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSectionsForCourse: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
