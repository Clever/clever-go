// Code generated by go-swagger; DO NOT EDIT.

package courses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Clever/clever-go/models"
)

// GetCourseReader is a Reader for the GetCourse structure.
type GetCourseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCourseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCourseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetCourseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /courses/{id}] getCourse", response, response.Code())
	}
}

// NewGetCourseOK creates a GetCourseOK with default headers values
func NewGetCourseOK() *GetCourseOK {
	return &GetCourseOK{}
}

/*
GetCourseOK describes a response with status code 200, with default header values.

OK Response
*/
type GetCourseOK struct {
	Payload *models.CourseResponse
}

// IsSuccess returns true when this get course o k response has a 2xx status code
func (o *GetCourseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get course o k response has a 3xx status code
func (o *GetCourseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get course o k response has a 4xx status code
func (o *GetCourseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get course o k response has a 5xx status code
func (o *GetCourseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get course o k response a status code equal to that given
func (o *GetCourseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get course o k response
func (o *GetCourseOK) Code() int {
	return 200
}

func (o *GetCourseOK) Error() string {
	return fmt.Sprintf("[GET /courses/{id}][%d] getCourseOK  %+v", 200, o.Payload)
}

func (o *GetCourseOK) String() string {
	return fmt.Sprintf("[GET /courses/{id}][%d] getCourseOK  %+v", 200, o.Payload)
}

func (o *GetCourseOK) GetPayload() *models.CourseResponse {
	return o.Payload
}

func (o *GetCourseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CourseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCourseNotFound creates a GetCourseNotFound with default headers values
func NewGetCourseNotFound() *GetCourseNotFound {
	return &GetCourseNotFound{}
}

/*
GetCourseNotFound describes a response with status code 404, with default header values.

Entity Not Found
*/
type GetCourseNotFound struct {
	Payload *models.NotFound
}

// IsSuccess returns true when this get course not found response has a 2xx status code
func (o *GetCourseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get course not found response has a 3xx status code
func (o *GetCourseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get course not found response has a 4xx status code
func (o *GetCourseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get course not found response has a 5xx status code
func (o *GetCourseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get course not found response a status code equal to that given
func (o *GetCourseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get course not found response
func (o *GetCourseNotFound) Code() int {
	return 404
}

func (o *GetCourseNotFound) Error() string {
	return fmt.Sprintf("[GET /courses/{id}][%d] getCourseNotFound  %+v", 404, o.Payload)
}

func (o *GetCourseNotFound) String() string {
	return fmt.Sprintf("[GET /courses/{id}][%d] getCourseNotFound  %+v", 404, o.Payload)
}

func (o *GetCourseNotFound) GetPayload() *models.NotFound {
	return o.Payload
}

func (o *GetCourseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.NotFound)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
