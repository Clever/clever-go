// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/Clever/clever-go/restapi/operations/courses"
	"github.com/Clever/clever-go/restapi/operations/districts"
	"github.com/Clever/clever-go/restapi/operations/events"
	"github.com/Clever/clever-go/restapi/operations/resources"
	"github.com/Clever/clever-go/restapi/operations/schools"
	"github.com/Clever/clever-go/restapi/operations/sections"
	"github.com/Clever/clever-go/restapi/operations/terms"
	"github.com/Clever/clever-go/restapi/operations/users"
)

// NewCleverAPI creates a new Clever instance
func NewCleverAPI(spec *loads.Document) *CleverAPI {
	return &CleverAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer: runtime.JSONConsumer(),

		JSONProducer: runtime.JSONProducer(),

		UsersGetContactsForUserHandler: users.GetContactsForUserHandlerFunc(func(params users.GetContactsForUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.GetContactsForUser has not yet been implemented")
		}),
		CoursesGetCourseHandler: courses.GetCourseHandlerFunc(func(params courses.GetCourseParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation courses.GetCourse has not yet been implemented")
		}),
		SectionsGetCourseForSectionHandler: sections.GetCourseForSectionHandlerFunc(func(params sections.GetCourseForSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation sections.GetCourseForSection has not yet been implemented")
		}),
		CoursesGetCoursesHandler: courses.GetCoursesHandlerFunc(func(params courses.GetCoursesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation courses.GetCourses has not yet been implemented")
		}),
		ResourcesGetCoursesForResourceHandler: resources.GetCoursesForResourceHandlerFunc(func(params resources.GetCoursesForResourceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation resources.GetCoursesForResource has not yet been implemented")
		}),
		SchoolsGetCoursesForSchoolHandler: schools.GetCoursesForSchoolHandlerFunc(func(params schools.GetCoursesForSchoolParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation schools.GetCoursesForSchool has not yet been implemented")
		}),
		DistrictsGetDistrictHandler: districts.GetDistrictHandlerFunc(func(params districts.GetDistrictParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation districts.GetDistrict has not yet been implemented")
		}),
		CoursesGetDistrictForCourseHandler: courses.GetDistrictForCourseHandlerFunc(func(params courses.GetDistrictForCourseParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation courses.GetDistrictForCourse has not yet been implemented")
		}),
		SchoolsGetDistrictForSchoolHandler: schools.GetDistrictForSchoolHandlerFunc(func(params schools.GetDistrictForSchoolParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation schools.GetDistrictForSchool has not yet been implemented")
		}),
		SectionsGetDistrictForSectionHandler: sections.GetDistrictForSectionHandlerFunc(func(params sections.GetDistrictForSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation sections.GetDistrictForSection has not yet been implemented")
		}),
		TermsGetDistrictForTermHandler: terms.GetDistrictForTermHandlerFunc(func(params terms.GetDistrictForTermParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation terms.GetDistrictForTerm has not yet been implemented")
		}),
		UsersGetDistrictForUserHandler: users.GetDistrictForUserHandlerFunc(func(params users.GetDistrictForUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.GetDistrictForUser has not yet been implemented")
		}),
		DistrictsGetDistrictsHandler: districts.GetDistrictsHandlerFunc(func(params districts.GetDistrictsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation districts.GetDistricts has not yet been implemented")
		}),
		EventsGetEventHandler: events.GetEventHandlerFunc(func(params events.GetEventParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation events.GetEvent has not yet been implemented")
		}),
		EventsGetEventsHandler: events.GetEventsHandlerFunc(func(params events.GetEventsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation events.GetEvents has not yet been implemented")
		}),
		ResourcesGetResourceHandler: resources.GetResourceHandlerFunc(func(params resources.GetResourceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation resources.GetResource has not yet been implemented")
		}),
		ResourcesGetResourcesHandler: resources.GetResourcesHandlerFunc(func(params resources.GetResourcesParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation resources.GetResources has not yet been implemented")
		}),
		CoursesGetResourcesForCourseHandler: courses.GetResourcesForCourseHandlerFunc(func(params courses.GetResourcesForCourseParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation courses.GetResourcesForCourse has not yet been implemented")
		}),
		SectionsGetResourcesForSectionHandler: sections.GetResourcesForSectionHandlerFunc(func(params sections.GetResourcesForSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation sections.GetResourcesForSection has not yet been implemented")
		}),
		UsersGetResourcesForUserHandler: users.GetResourcesForUserHandlerFunc(func(params users.GetResourcesForUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.GetResourcesForUser has not yet been implemented")
		}),
		SchoolsGetSchoolHandler: schools.GetSchoolHandlerFunc(func(params schools.GetSchoolParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation schools.GetSchool has not yet been implemented")
		}),
		SectionsGetSchoolForSectionHandler: sections.GetSchoolForSectionHandlerFunc(func(params sections.GetSchoolForSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation sections.GetSchoolForSection has not yet been implemented")
		}),
		SchoolsGetSchoolsHandler: schools.GetSchoolsHandlerFunc(func(params schools.GetSchoolsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation schools.GetSchools has not yet been implemented")
		}),
		CoursesGetSchoolsForCourseHandler: courses.GetSchoolsForCourseHandlerFunc(func(params courses.GetSchoolsForCourseParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation courses.GetSchoolsForCourse has not yet been implemented")
		}),
		TermsGetSchoolsForTermHandler: terms.GetSchoolsForTermHandlerFunc(func(params terms.GetSchoolsForTermParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation terms.GetSchoolsForTerm has not yet been implemented")
		}),
		UsersGetSchoolsForUserHandler: users.GetSchoolsForUserHandlerFunc(func(params users.GetSchoolsForUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.GetSchoolsForUser has not yet been implemented")
		}),
		SectionsGetSectionHandler: sections.GetSectionHandlerFunc(func(params sections.GetSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation sections.GetSection has not yet been implemented")
		}),
		SectionsGetSectionsHandler: sections.GetSectionsHandlerFunc(func(params sections.GetSectionsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation sections.GetSections has not yet been implemented")
		}),
		CoursesGetSectionsForCourseHandler: courses.GetSectionsForCourseHandlerFunc(func(params courses.GetSectionsForCourseParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation courses.GetSectionsForCourse has not yet been implemented")
		}),
		ResourcesGetSectionsForResourceHandler: resources.GetSectionsForResourceHandlerFunc(func(params resources.GetSectionsForResourceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation resources.GetSectionsForResource has not yet been implemented")
		}),
		SchoolsGetSectionsForSchoolHandler: schools.GetSectionsForSchoolHandlerFunc(func(params schools.GetSectionsForSchoolParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation schools.GetSectionsForSchool has not yet been implemented")
		}),
		TermsGetSectionsForTermHandler: terms.GetSectionsForTermHandlerFunc(func(params terms.GetSectionsForTermParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation terms.GetSectionsForTerm has not yet been implemented")
		}),
		UsersGetSectionsForUserHandler: users.GetSectionsForUserHandlerFunc(func(params users.GetSectionsForUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.GetSectionsForUser has not yet been implemented")
		}),
		UsersGetStudentsForUserHandler: users.GetStudentsForUserHandlerFunc(func(params users.GetStudentsForUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.GetStudentsForUser has not yet been implemented")
		}),
		UsersGetTeachersForUserHandler: users.GetTeachersForUserHandlerFunc(func(params users.GetTeachersForUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.GetTeachersForUser has not yet been implemented")
		}),
		TermsGetTermHandler: terms.GetTermHandlerFunc(func(params terms.GetTermParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation terms.GetTerm has not yet been implemented")
		}),
		SectionsGetTermForSectionHandler: sections.GetTermForSectionHandlerFunc(func(params sections.GetTermForSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation sections.GetTermForSection has not yet been implemented")
		}),
		TermsGetTermsHandler: terms.GetTermsHandlerFunc(func(params terms.GetTermsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation terms.GetTerms has not yet been implemented")
		}),
		SchoolsGetTermsForSchoolHandler: schools.GetTermsForSchoolHandlerFunc(func(params schools.GetTermsForSchoolParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation schools.GetTermsForSchool has not yet been implemented")
		}),
		UsersGetUserHandler: users.GetUserHandlerFunc(func(params users.GetUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.GetUser has not yet been implemented")
		}),
		UsersGetUsersHandler: users.GetUsersHandlerFunc(func(params users.GetUsersParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation users.GetUsers has not yet been implemented")
		}),
		ResourcesGetUsersForResourceHandler: resources.GetUsersForResourceHandlerFunc(func(params resources.GetUsersForResourceParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation resources.GetUsersForResource has not yet been implemented")
		}),
		SchoolsGetUsersForSchoolHandler: schools.GetUsersForSchoolHandlerFunc(func(params schools.GetUsersForSchoolParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation schools.GetUsersForSchool has not yet been implemented")
		}),
		SectionsGetUsersForSectionHandler: sections.GetUsersForSectionHandlerFunc(func(params sections.GetUsersForSectionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation sections.GetUsersForSection has not yet been implemented")
		}),

		OauthAuth: func(token string, scopes []string) (interface{}, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (oauth) has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*CleverAPI Serves the Clever Data API */
type CleverAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator

	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator

	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// OauthAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	OauthAuth func(string, []string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// UsersGetContactsForUserHandler sets the operation handler for the get contacts for user operation
	UsersGetContactsForUserHandler users.GetContactsForUserHandler
	// CoursesGetCourseHandler sets the operation handler for the get course operation
	CoursesGetCourseHandler courses.GetCourseHandler
	// SectionsGetCourseForSectionHandler sets the operation handler for the get course for section operation
	SectionsGetCourseForSectionHandler sections.GetCourseForSectionHandler
	// CoursesGetCoursesHandler sets the operation handler for the get courses operation
	CoursesGetCoursesHandler courses.GetCoursesHandler
	// ResourcesGetCoursesForResourceHandler sets the operation handler for the get courses for resource operation
	ResourcesGetCoursesForResourceHandler resources.GetCoursesForResourceHandler
	// SchoolsGetCoursesForSchoolHandler sets the operation handler for the get courses for school operation
	SchoolsGetCoursesForSchoolHandler schools.GetCoursesForSchoolHandler
	// DistrictsGetDistrictHandler sets the operation handler for the get district operation
	DistrictsGetDistrictHandler districts.GetDistrictHandler
	// CoursesGetDistrictForCourseHandler sets the operation handler for the get district for course operation
	CoursesGetDistrictForCourseHandler courses.GetDistrictForCourseHandler
	// SchoolsGetDistrictForSchoolHandler sets the operation handler for the get district for school operation
	SchoolsGetDistrictForSchoolHandler schools.GetDistrictForSchoolHandler
	// SectionsGetDistrictForSectionHandler sets the operation handler for the get district for section operation
	SectionsGetDistrictForSectionHandler sections.GetDistrictForSectionHandler
	// TermsGetDistrictForTermHandler sets the operation handler for the get district for term operation
	TermsGetDistrictForTermHandler terms.GetDistrictForTermHandler
	// UsersGetDistrictForUserHandler sets the operation handler for the get district for user operation
	UsersGetDistrictForUserHandler users.GetDistrictForUserHandler
	// DistrictsGetDistrictsHandler sets the operation handler for the get districts operation
	DistrictsGetDistrictsHandler districts.GetDistrictsHandler
	// EventsGetEventHandler sets the operation handler for the get event operation
	EventsGetEventHandler events.GetEventHandler
	// EventsGetEventsHandler sets the operation handler for the get events operation
	EventsGetEventsHandler events.GetEventsHandler
	// ResourcesGetResourceHandler sets the operation handler for the get resource operation
	ResourcesGetResourceHandler resources.GetResourceHandler
	// ResourcesGetResourcesHandler sets the operation handler for the get resources operation
	ResourcesGetResourcesHandler resources.GetResourcesHandler
	// CoursesGetResourcesForCourseHandler sets the operation handler for the get resources for course operation
	CoursesGetResourcesForCourseHandler courses.GetResourcesForCourseHandler
	// SectionsGetResourcesForSectionHandler sets the operation handler for the get resources for section operation
	SectionsGetResourcesForSectionHandler sections.GetResourcesForSectionHandler
	// UsersGetResourcesForUserHandler sets the operation handler for the get resources for user operation
	UsersGetResourcesForUserHandler users.GetResourcesForUserHandler
	// SchoolsGetSchoolHandler sets the operation handler for the get school operation
	SchoolsGetSchoolHandler schools.GetSchoolHandler
	// SectionsGetSchoolForSectionHandler sets the operation handler for the get school for section operation
	SectionsGetSchoolForSectionHandler sections.GetSchoolForSectionHandler
	// SchoolsGetSchoolsHandler sets the operation handler for the get schools operation
	SchoolsGetSchoolsHandler schools.GetSchoolsHandler
	// CoursesGetSchoolsForCourseHandler sets the operation handler for the get schools for course operation
	CoursesGetSchoolsForCourseHandler courses.GetSchoolsForCourseHandler
	// TermsGetSchoolsForTermHandler sets the operation handler for the get schools for term operation
	TermsGetSchoolsForTermHandler terms.GetSchoolsForTermHandler
	// UsersGetSchoolsForUserHandler sets the operation handler for the get schools for user operation
	UsersGetSchoolsForUserHandler users.GetSchoolsForUserHandler
	// SectionsGetSectionHandler sets the operation handler for the get section operation
	SectionsGetSectionHandler sections.GetSectionHandler
	// SectionsGetSectionsHandler sets the operation handler for the get sections operation
	SectionsGetSectionsHandler sections.GetSectionsHandler
	// CoursesGetSectionsForCourseHandler sets the operation handler for the get sections for course operation
	CoursesGetSectionsForCourseHandler courses.GetSectionsForCourseHandler
	// ResourcesGetSectionsForResourceHandler sets the operation handler for the get sections for resource operation
	ResourcesGetSectionsForResourceHandler resources.GetSectionsForResourceHandler
	// SchoolsGetSectionsForSchoolHandler sets the operation handler for the get sections for school operation
	SchoolsGetSectionsForSchoolHandler schools.GetSectionsForSchoolHandler
	// TermsGetSectionsForTermHandler sets the operation handler for the get sections for term operation
	TermsGetSectionsForTermHandler terms.GetSectionsForTermHandler
	// UsersGetSectionsForUserHandler sets the operation handler for the get sections for user operation
	UsersGetSectionsForUserHandler users.GetSectionsForUserHandler
	// UsersGetStudentsForUserHandler sets the operation handler for the get students for user operation
	UsersGetStudentsForUserHandler users.GetStudentsForUserHandler
	// UsersGetTeachersForUserHandler sets the operation handler for the get teachers for user operation
	UsersGetTeachersForUserHandler users.GetTeachersForUserHandler
	// TermsGetTermHandler sets the operation handler for the get term operation
	TermsGetTermHandler terms.GetTermHandler
	// SectionsGetTermForSectionHandler sets the operation handler for the get term for section operation
	SectionsGetTermForSectionHandler sections.GetTermForSectionHandler
	// TermsGetTermsHandler sets the operation handler for the get terms operation
	TermsGetTermsHandler terms.GetTermsHandler
	// SchoolsGetTermsForSchoolHandler sets the operation handler for the get terms for school operation
	SchoolsGetTermsForSchoolHandler schools.GetTermsForSchoolHandler
	// UsersGetUserHandler sets the operation handler for the get user operation
	UsersGetUserHandler users.GetUserHandler
	// UsersGetUsersHandler sets the operation handler for the get users operation
	UsersGetUsersHandler users.GetUsersHandler
	// ResourcesGetUsersForResourceHandler sets the operation handler for the get users for resource operation
	ResourcesGetUsersForResourceHandler resources.GetUsersForResourceHandler
	// SchoolsGetUsersForSchoolHandler sets the operation handler for the get users for school operation
	SchoolsGetUsersForSchoolHandler schools.GetUsersForSchoolHandler
	// SectionsGetUsersForSectionHandler sets the operation handler for the get users for section operation
	SectionsGetUsersForSectionHandler sections.GetUsersForSectionHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *CleverAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *CleverAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *CleverAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *CleverAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *CleverAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *CleverAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *CleverAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *CleverAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *CleverAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the CleverAPI
func (o *CleverAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.OauthAuth == nil {
		unregistered = append(unregistered, "OauthAuth")
	}

	if o.UsersGetContactsForUserHandler == nil {
		unregistered = append(unregistered, "users.GetContactsForUserHandler")
	}
	if o.CoursesGetCourseHandler == nil {
		unregistered = append(unregistered, "courses.GetCourseHandler")
	}
	if o.SectionsGetCourseForSectionHandler == nil {
		unregistered = append(unregistered, "sections.GetCourseForSectionHandler")
	}
	if o.CoursesGetCoursesHandler == nil {
		unregistered = append(unregistered, "courses.GetCoursesHandler")
	}
	if o.ResourcesGetCoursesForResourceHandler == nil {
		unregistered = append(unregistered, "resources.GetCoursesForResourceHandler")
	}
	if o.SchoolsGetCoursesForSchoolHandler == nil {
		unregistered = append(unregistered, "schools.GetCoursesForSchoolHandler")
	}
	if o.DistrictsGetDistrictHandler == nil {
		unregistered = append(unregistered, "districts.GetDistrictHandler")
	}
	if o.CoursesGetDistrictForCourseHandler == nil {
		unregistered = append(unregistered, "courses.GetDistrictForCourseHandler")
	}
	if o.SchoolsGetDistrictForSchoolHandler == nil {
		unregistered = append(unregistered, "schools.GetDistrictForSchoolHandler")
	}
	if o.SectionsGetDistrictForSectionHandler == nil {
		unregistered = append(unregistered, "sections.GetDistrictForSectionHandler")
	}
	if o.TermsGetDistrictForTermHandler == nil {
		unregistered = append(unregistered, "terms.GetDistrictForTermHandler")
	}
	if o.UsersGetDistrictForUserHandler == nil {
		unregistered = append(unregistered, "users.GetDistrictForUserHandler")
	}
	if o.DistrictsGetDistrictsHandler == nil {
		unregistered = append(unregistered, "districts.GetDistrictsHandler")
	}
	if o.EventsGetEventHandler == nil {
		unregistered = append(unregistered, "events.GetEventHandler")
	}
	if o.EventsGetEventsHandler == nil {
		unregistered = append(unregistered, "events.GetEventsHandler")
	}
	if o.ResourcesGetResourceHandler == nil {
		unregistered = append(unregistered, "resources.GetResourceHandler")
	}
	if o.ResourcesGetResourcesHandler == nil {
		unregistered = append(unregistered, "resources.GetResourcesHandler")
	}
	if o.CoursesGetResourcesForCourseHandler == nil {
		unregistered = append(unregistered, "courses.GetResourcesForCourseHandler")
	}
	if o.SectionsGetResourcesForSectionHandler == nil {
		unregistered = append(unregistered, "sections.GetResourcesForSectionHandler")
	}
	if o.UsersGetResourcesForUserHandler == nil {
		unregistered = append(unregistered, "users.GetResourcesForUserHandler")
	}
	if o.SchoolsGetSchoolHandler == nil {
		unregistered = append(unregistered, "schools.GetSchoolHandler")
	}
	if o.SectionsGetSchoolForSectionHandler == nil {
		unregistered = append(unregistered, "sections.GetSchoolForSectionHandler")
	}
	if o.SchoolsGetSchoolsHandler == nil {
		unregistered = append(unregistered, "schools.GetSchoolsHandler")
	}
	if o.CoursesGetSchoolsForCourseHandler == nil {
		unregistered = append(unregistered, "courses.GetSchoolsForCourseHandler")
	}
	if o.TermsGetSchoolsForTermHandler == nil {
		unregistered = append(unregistered, "terms.GetSchoolsForTermHandler")
	}
	if o.UsersGetSchoolsForUserHandler == nil {
		unregistered = append(unregistered, "users.GetSchoolsForUserHandler")
	}
	if o.SectionsGetSectionHandler == nil {
		unregistered = append(unregistered, "sections.GetSectionHandler")
	}
	if o.SectionsGetSectionsHandler == nil {
		unregistered = append(unregistered, "sections.GetSectionsHandler")
	}
	if o.CoursesGetSectionsForCourseHandler == nil {
		unregistered = append(unregistered, "courses.GetSectionsForCourseHandler")
	}
	if o.ResourcesGetSectionsForResourceHandler == nil {
		unregistered = append(unregistered, "resources.GetSectionsForResourceHandler")
	}
	if o.SchoolsGetSectionsForSchoolHandler == nil {
		unregistered = append(unregistered, "schools.GetSectionsForSchoolHandler")
	}
	if o.TermsGetSectionsForTermHandler == nil {
		unregistered = append(unregistered, "terms.GetSectionsForTermHandler")
	}
	if o.UsersGetSectionsForUserHandler == nil {
		unregistered = append(unregistered, "users.GetSectionsForUserHandler")
	}
	if o.UsersGetStudentsForUserHandler == nil {
		unregistered = append(unregistered, "users.GetStudentsForUserHandler")
	}
	if o.UsersGetTeachersForUserHandler == nil {
		unregistered = append(unregistered, "users.GetTeachersForUserHandler")
	}
	if o.TermsGetTermHandler == nil {
		unregistered = append(unregistered, "terms.GetTermHandler")
	}
	if o.SectionsGetTermForSectionHandler == nil {
		unregistered = append(unregistered, "sections.GetTermForSectionHandler")
	}
	if o.TermsGetTermsHandler == nil {
		unregistered = append(unregistered, "terms.GetTermsHandler")
	}
	if o.SchoolsGetTermsForSchoolHandler == nil {
		unregistered = append(unregistered, "schools.GetTermsForSchoolHandler")
	}
	if o.UsersGetUserHandler == nil {
		unregistered = append(unregistered, "users.GetUserHandler")
	}
	if o.UsersGetUsersHandler == nil {
		unregistered = append(unregistered, "users.GetUsersHandler")
	}
	if o.ResourcesGetUsersForResourceHandler == nil {
		unregistered = append(unregistered, "resources.GetUsersForResourceHandler")
	}
	if o.SchoolsGetUsersForSchoolHandler == nil {
		unregistered = append(unregistered, "schools.GetUsersForSchoolHandler")
	}
	if o.SectionsGetUsersForSectionHandler == nil {
		unregistered = append(unregistered, "sections.GetUsersForSectionHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *CleverAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *CleverAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "oauth":
			result[name] = o.BearerAuthenticator(name, o.OauthAuth)

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *CleverAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *CleverAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *CleverAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *CleverAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the clever API
func (o *CleverAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *CleverAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{id}/mycontacts"] = users.NewGetContactsForUser(o.context, o.UsersGetContactsForUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/courses/{id}"] = courses.NewGetCourse(o.context, o.CoursesGetCourseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sections/{id}/course"] = sections.NewGetCourseForSection(o.context, o.SectionsGetCourseForSectionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/courses"] = courses.NewGetCourses(o.context, o.CoursesGetCoursesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/resources/{id}/courses"] = resources.NewGetCoursesForResource(o.context, o.ResourcesGetCoursesForResourceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/schools/{id}/courses"] = schools.NewGetCoursesForSchool(o.context, o.SchoolsGetCoursesForSchoolHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/districts/{id}"] = districts.NewGetDistrict(o.context, o.DistrictsGetDistrictHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/courses/{id}/district"] = courses.NewGetDistrictForCourse(o.context, o.CoursesGetDistrictForCourseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/schools/{id}/district"] = schools.NewGetDistrictForSchool(o.context, o.SchoolsGetDistrictForSchoolHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sections/{id}/district"] = sections.NewGetDistrictForSection(o.context, o.SectionsGetDistrictForSectionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/terms/{id}/district"] = terms.NewGetDistrictForTerm(o.context, o.TermsGetDistrictForTermHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{id}/district"] = users.NewGetDistrictForUser(o.context, o.UsersGetDistrictForUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/districts"] = districts.NewGetDistricts(o.context, o.DistrictsGetDistrictsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/events/{id}"] = events.NewGetEvent(o.context, o.EventsGetEventHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/events"] = events.NewGetEvents(o.context, o.EventsGetEventsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/resources/{id}"] = resources.NewGetResource(o.context, o.ResourcesGetResourceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/resources"] = resources.NewGetResources(o.context, o.ResourcesGetResourcesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/courses/{id}/resources"] = courses.NewGetResourcesForCourse(o.context, o.CoursesGetResourcesForCourseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sections/{id}/resources"] = sections.NewGetResourcesForSection(o.context, o.SectionsGetResourcesForSectionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{id}/resources"] = users.NewGetResourcesForUser(o.context, o.UsersGetResourcesForUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/schools/{id}"] = schools.NewGetSchool(o.context, o.SchoolsGetSchoolHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sections/{id}/school"] = sections.NewGetSchoolForSection(o.context, o.SectionsGetSchoolForSectionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/schools"] = schools.NewGetSchools(o.context, o.SchoolsGetSchoolsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/courses/{id}/schools"] = courses.NewGetSchoolsForCourse(o.context, o.CoursesGetSchoolsForCourseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/terms/{id}/schools"] = terms.NewGetSchoolsForTerm(o.context, o.TermsGetSchoolsForTermHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{id}/schools"] = users.NewGetSchoolsForUser(o.context, o.UsersGetSchoolsForUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sections/{id}"] = sections.NewGetSection(o.context, o.SectionsGetSectionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sections"] = sections.NewGetSections(o.context, o.SectionsGetSectionsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/courses/{id}/sections"] = courses.NewGetSectionsForCourse(o.context, o.CoursesGetSectionsForCourseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/resources/{id}/sections"] = resources.NewGetSectionsForResource(o.context, o.ResourcesGetSectionsForResourceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/schools/{id}/sections"] = schools.NewGetSectionsForSchool(o.context, o.SchoolsGetSectionsForSchoolHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/terms/{id}/sections"] = terms.NewGetSectionsForTerm(o.context, o.TermsGetSectionsForTermHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{id}/sections"] = users.NewGetSectionsForUser(o.context, o.UsersGetSectionsForUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{id}/mystudents"] = users.NewGetStudentsForUser(o.context, o.UsersGetStudentsForUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{id}/myteachers"] = users.NewGetTeachersForUser(o.context, o.UsersGetTeachersForUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/terms/{id}"] = terms.NewGetTerm(o.context, o.TermsGetTermHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sections/{id}/term"] = sections.NewGetTermForSection(o.context, o.SectionsGetTermForSectionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/terms"] = terms.NewGetTerms(o.context, o.TermsGetTermsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/schools/{id}/terms"] = schools.NewGetTermsForSchool(o.context, o.SchoolsGetTermsForSchoolHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users/{id}"] = users.NewGetUser(o.context, o.UsersGetUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/users"] = users.NewGetUsers(o.context, o.UsersGetUsersHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/resources/{id}/users"] = resources.NewGetUsersForResource(o.context, o.ResourcesGetUsersForResourceHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/schools/{id}/users"] = schools.NewGetUsersForSchool(o.context, o.SchoolsGetUsersForSchoolHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/sections/{id}/users"] = sections.NewGetUsersForSection(o.context, o.SectionsGetUsersForSectionHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *CleverAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *CleverAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *CleverAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *CleverAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *CleverAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
