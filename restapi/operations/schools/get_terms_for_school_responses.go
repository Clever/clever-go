// Code generated by go-swagger; DO NOT EDIT.

package schools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Clever/clever-go/models"
)

// GetTermsForSchoolOKCode is the HTTP code returned for type GetTermsForSchoolOK
const GetTermsForSchoolOKCode int = 200

/*
GetTermsForSchoolOK OK Response

swagger:response getTermsForSchoolOK
*/
type GetTermsForSchoolOK struct {

	/*
	  In: Body
	*/
	Payload *models.TermsResponse `json:"body,omitempty"`
}

// NewGetTermsForSchoolOK creates GetTermsForSchoolOK with default headers values
func NewGetTermsForSchoolOK() *GetTermsForSchoolOK {

	return &GetTermsForSchoolOK{}
}

// WithPayload adds the payload to the get terms for school o k response
func (o *GetTermsForSchoolOK) WithPayload(payload *models.TermsResponse) *GetTermsForSchoolOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get terms for school o k response
func (o *GetTermsForSchoolOK) SetPayload(payload *models.TermsResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTermsForSchoolOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTermsForSchoolNotFoundCode is the HTTP code returned for type GetTermsForSchoolNotFound
const GetTermsForSchoolNotFoundCode int = 404

/*
GetTermsForSchoolNotFound Entity Not Found

swagger:response getTermsForSchoolNotFound
*/
type GetTermsForSchoolNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.NotFound `json:"body,omitempty"`
}

// NewGetTermsForSchoolNotFound creates GetTermsForSchoolNotFound with default headers values
func NewGetTermsForSchoolNotFound() *GetTermsForSchoolNotFound {

	return &GetTermsForSchoolNotFound{}
}

// WithPayload adds the payload to the get terms for school not found response
func (o *GetTermsForSchoolNotFound) WithPayload(payload *models.NotFound) *GetTermsForSchoolNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get terms for school not found response
func (o *GetTermsForSchoolNotFound) SetPayload(payload *models.NotFound) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTermsForSchoolNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
