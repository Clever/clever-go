// Code generated by go-swagger; DO NOT EDIT.

package courses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Clever/clever-go/models"
)

// GetResourcesForCourseOKCode is the HTTP code returned for type GetResourcesForCourseOK
const GetResourcesForCourseOKCode int = 200

/*GetResourcesForCourseOK OK Response

swagger:response getResourcesForCourseOK
*/
type GetResourcesForCourseOK struct {

	/*
	  In: Body
	*/
	Payload *models.ResourcesResponse `json:"body,omitempty"`
}

// NewGetResourcesForCourseOK creates GetResourcesForCourseOK with default headers values
func NewGetResourcesForCourseOK() *GetResourcesForCourseOK {

	return &GetResourcesForCourseOK{}
}

// WithPayload adds the payload to the get resources for course o k response
func (o *GetResourcesForCourseOK) WithPayload(payload *models.ResourcesResponse) *GetResourcesForCourseOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get resources for course o k response
func (o *GetResourcesForCourseOK) SetPayload(payload *models.ResourcesResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetResourcesForCourseOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetResourcesForCourseNotFoundCode is the HTTP code returned for type GetResourcesForCourseNotFound
const GetResourcesForCourseNotFoundCode int = 404

/*GetResourcesForCourseNotFound Entity Not Found

swagger:response getResourcesForCourseNotFound
*/
type GetResourcesForCourseNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.NotFound `json:"body,omitempty"`
}

// NewGetResourcesForCourseNotFound creates GetResourcesForCourseNotFound with default headers values
func NewGetResourcesForCourseNotFound() *GetResourcesForCourseNotFound {

	return &GetResourcesForCourseNotFound{}
}

// WithPayload adds the payload to the get resources for course not found response
func (o *GetResourcesForCourseNotFound) WithPayload(payload *models.NotFound) *GetResourcesForCourseNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get resources for course not found response
func (o *GetResourcesForCourseNotFound) SetPayload(payload *models.NotFound) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetResourcesForCourseNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
