// Code generated by go-swagger; DO NOT EDIT.

package courses

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Clever/clever-go/models"
)

// GetSectionsForCourseOKCode is the HTTP code returned for type GetSectionsForCourseOK
const GetSectionsForCourseOKCode int = 200

/*
GetSectionsForCourseOK OK Response

swagger:response getSectionsForCourseOK
*/
type GetSectionsForCourseOK struct {

	/*
	  In: Body
	*/
	Payload *models.SectionsResponse `json:"body,omitempty"`
}

// NewGetSectionsForCourseOK creates GetSectionsForCourseOK with default headers values
func NewGetSectionsForCourseOK() *GetSectionsForCourseOK {

	return &GetSectionsForCourseOK{}
}

// WithPayload adds the payload to the get sections for course o k response
func (o *GetSectionsForCourseOK) WithPayload(payload *models.SectionsResponse) *GetSectionsForCourseOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get sections for course o k response
func (o *GetSectionsForCourseOK) SetPayload(payload *models.SectionsResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSectionsForCourseOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSectionsForCourseNotFoundCode is the HTTP code returned for type GetSectionsForCourseNotFound
const GetSectionsForCourseNotFoundCode int = 404

/*
GetSectionsForCourseNotFound Entity Not Found

swagger:response getSectionsForCourseNotFound
*/
type GetSectionsForCourseNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.NotFound `json:"body,omitempty"`
}

// NewGetSectionsForCourseNotFound creates GetSectionsForCourseNotFound with default headers values
func NewGetSectionsForCourseNotFound() *GetSectionsForCourseNotFound {

	return &GetSectionsForCourseNotFound{}
}

// WithPayload adds the payload to the get sections for course not found response
func (o *GetSectionsForCourseNotFound) WithPayload(payload *models.NotFound) *GetSectionsForCourseNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get sections for course not found response
func (o *GetSectionsForCourseNotFound) SetPayload(payload *models.NotFound) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSectionsForCourseNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
