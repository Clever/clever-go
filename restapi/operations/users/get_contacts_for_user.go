// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetContactsForUserHandlerFunc turns a function with the right signature into a get contacts for user handler
type GetContactsForUserHandlerFunc func(GetContactsForUserParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetContactsForUserHandlerFunc) Handle(params GetContactsForUserParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetContactsForUserHandler interface for that can handle valid get contacts for user params
type GetContactsForUserHandler interface {
	Handle(GetContactsForUserParams, interface{}) middleware.Responder
}

// NewGetContactsForUser creates a new http.Handler for the get contacts for user operation
func NewGetContactsForUser(ctx *middleware.Context, handler GetContactsForUserHandler) *GetContactsForUser {
	return &GetContactsForUser{Context: ctx, Handler: handler}
}

/*
	GetContactsForUser swagger:route GET /users/{id}/mycontacts Users getContactsForUser

Returns the contact users for a student user
*/
type GetContactsForUser struct {
	Context *middleware.Context
	Handler GetContactsForUserHandler
}

func (o *GetContactsForUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetContactsForUserParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
