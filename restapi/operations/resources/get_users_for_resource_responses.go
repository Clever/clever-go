// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Clever/clever-go/models"
)

// GetUsersForResourceOKCode is the HTTP code returned for type GetUsersForResourceOK
const GetUsersForResourceOKCode int = 200

/*
GetUsersForResourceOK OK Response

swagger:response getUsersForResourceOK
*/
type GetUsersForResourceOK struct {

	/*
	  In: Body
	*/
	Payload *models.UsersResponse `json:"body,omitempty"`
}

// NewGetUsersForResourceOK creates GetUsersForResourceOK with default headers values
func NewGetUsersForResourceOK() *GetUsersForResourceOK {

	return &GetUsersForResourceOK{}
}

// WithPayload adds the payload to the get users for resource o k response
func (o *GetUsersForResourceOK) WithPayload(payload *models.UsersResponse) *GetUsersForResourceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get users for resource o k response
func (o *GetUsersForResourceOK) SetPayload(payload *models.UsersResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUsersForResourceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUsersForResourceNotFoundCode is the HTTP code returned for type GetUsersForResourceNotFound
const GetUsersForResourceNotFoundCode int = 404

/*
GetUsersForResourceNotFound Entity Not Found

swagger:response getUsersForResourceNotFound
*/
type GetUsersForResourceNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.NotFound `json:"body,omitempty"`
}

// NewGetUsersForResourceNotFound creates GetUsersForResourceNotFound with default headers values
func NewGetUsersForResourceNotFound() *GetUsersForResourceNotFound {

	return &GetUsersForResourceNotFound{}
}

// WithPayload adds the payload to the get users for resource not found response
func (o *GetUsersForResourceNotFound) WithPayload(payload *models.NotFound) *GetUsersForResourceNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get users for resource not found response
func (o *GetUsersForResourceNotFound) SetPayload(payload *models.NotFound) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUsersForResourceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
