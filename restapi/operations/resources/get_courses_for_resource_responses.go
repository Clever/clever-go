// Code generated by go-swagger; DO NOT EDIT.

package resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Clever/clever-go/models"
)

// GetCoursesForResourceOKCode is the HTTP code returned for type GetCoursesForResourceOK
const GetCoursesForResourceOKCode int = 200

/*GetCoursesForResourceOK OK Response

swagger:response getCoursesForResourceOK
*/
type GetCoursesForResourceOK struct {

	/*
	  In: Body
	*/
	Payload *models.CoursesResponse `json:"body,omitempty"`
}

// NewGetCoursesForResourceOK creates GetCoursesForResourceOK with default headers values
func NewGetCoursesForResourceOK() *GetCoursesForResourceOK {

	return &GetCoursesForResourceOK{}
}

// WithPayload adds the payload to the get courses for resource o k response
func (o *GetCoursesForResourceOK) WithPayload(payload *models.CoursesResponse) *GetCoursesForResourceOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get courses for resource o k response
func (o *GetCoursesForResourceOK) SetPayload(payload *models.CoursesResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCoursesForResourceOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCoursesForResourceNotFoundCode is the HTTP code returned for type GetCoursesForResourceNotFound
const GetCoursesForResourceNotFoundCode int = 404

/*GetCoursesForResourceNotFound Entity Not Found

swagger:response getCoursesForResourceNotFound
*/
type GetCoursesForResourceNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.NotFound `json:"body,omitempty"`
}

// NewGetCoursesForResourceNotFound creates GetCoursesForResourceNotFound with default headers values
func NewGetCoursesForResourceNotFound() *GetCoursesForResourceNotFound {

	return &GetCoursesForResourceNotFound{}
}

// WithPayload adds the payload to the get courses for resource not found response
func (o *GetCoursesForResourceNotFound) WithPayload(payload *models.NotFound) *GetCoursesForResourceNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get courses for resource not found response
func (o *GetCoursesForResourceNotFound) SetPayload(payload *models.NotFound) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCoursesForResourceNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
