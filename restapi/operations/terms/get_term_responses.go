// Code generated by go-swagger; DO NOT EDIT.

package terms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Clever/clever-go/models"
)

// GetTermOKCode is the HTTP code returned for type GetTermOK
const GetTermOKCode int = 200

/*
GetTermOK OK Response

swagger:response getTermOK
*/
type GetTermOK struct {

	/*
	  In: Body
	*/
	Payload *models.TermResponse `json:"body,omitempty"`
}

// NewGetTermOK creates GetTermOK with default headers values
func NewGetTermOK() *GetTermOK {

	return &GetTermOK{}
}

// WithPayload adds the payload to the get term o k response
func (o *GetTermOK) WithPayload(payload *models.TermResponse) *GetTermOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get term o k response
func (o *GetTermOK) SetPayload(payload *models.TermResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTermOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetTermNotFoundCode is the HTTP code returned for type GetTermNotFound
const GetTermNotFoundCode int = 404

/*
GetTermNotFound Entity Not Found

swagger:response getTermNotFound
*/
type GetTermNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.NotFound `json:"body,omitempty"`
}

// NewGetTermNotFound creates GetTermNotFound with default headers values
func NewGetTermNotFound() *GetTermNotFound {

	return &GetTermNotFound{}
}

// WithPayload adds the payload to the get term not found response
func (o *GetTermNotFound) WithPayload(payload *models.NotFound) *GetTermNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get term not found response
func (o *GetTermNotFound) SetPayload(payload *models.NotFound) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTermNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
