// Code generated by go-swagger; DO NOT EDIT.

package sections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Clever/clever-go/models"
)

// GetSchoolForSectionOKCode is the HTTP code returned for type GetSchoolForSectionOK
const GetSchoolForSectionOKCode int = 200

/*
GetSchoolForSectionOK OK Response

swagger:response getSchoolForSectionOK
*/
type GetSchoolForSectionOK struct {

	/*
	  In: Body
	*/
	Payload *models.SchoolResponse `json:"body,omitempty"`
}

// NewGetSchoolForSectionOK creates GetSchoolForSectionOK with default headers values
func NewGetSchoolForSectionOK() *GetSchoolForSectionOK {

	return &GetSchoolForSectionOK{}
}

// WithPayload adds the payload to the get school for section o k response
func (o *GetSchoolForSectionOK) WithPayload(payload *models.SchoolResponse) *GetSchoolForSectionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get school for section o k response
func (o *GetSchoolForSectionOK) SetPayload(payload *models.SchoolResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSchoolForSectionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSchoolForSectionNotFoundCode is the HTTP code returned for type GetSchoolForSectionNotFound
const GetSchoolForSectionNotFoundCode int = 404

/*
GetSchoolForSectionNotFound Entity Not Found

swagger:response getSchoolForSectionNotFound
*/
type GetSchoolForSectionNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.NotFound `json:"body,omitempty"`
}

// NewGetSchoolForSectionNotFound creates GetSchoolForSectionNotFound with default headers values
func NewGetSchoolForSectionNotFound() *GetSchoolForSectionNotFound {

	return &GetSchoolForSectionNotFound{}
}

// WithPayload adds the payload to the get school for section not found response
func (o *GetSchoolForSectionNotFound) WithPayload(payload *models.NotFound) *GetSchoolForSectionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get school for section not found response
func (o *GetSchoolForSectionNotFound) SetPayload(payload *models.NotFound) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSchoolForSectionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
