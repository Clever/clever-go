// Code generated by go-swagger; DO NOT EDIT.

package sections

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Clever/clever-go/models"
)

// GetSectionOKCode is the HTTP code returned for type GetSectionOK
const GetSectionOKCode int = 200

/*
GetSectionOK OK Response

swagger:response getSectionOK
*/
type GetSectionOK struct {

	/*
	  In: Body
	*/
	Payload *models.SectionResponse `json:"body,omitempty"`
}

// NewGetSectionOK creates GetSectionOK with default headers values
func NewGetSectionOK() *GetSectionOK {

	return &GetSectionOK{}
}

// WithPayload adds the payload to the get section o k response
func (o *GetSectionOK) WithPayload(payload *models.SectionResponse) *GetSectionOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get section o k response
func (o *GetSectionOK) SetPayload(payload *models.SectionResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSectionOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSectionNotFoundCode is the HTTP code returned for type GetSectionNotFound
const GetSectionNotFoundCode int = 404

/*
GetSectionNotFound Entity Not Found

swagger:response getSectionNotFound
*/
type GetSectionNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.NotFound `json:"body,omitempty"`
}

// NewGetSectionNotFound creates GetSectionNotFound with default headers values
func NewGetSectionNotFound() *GetSectionNotFound {

	return &GetSectionNotFound{}
}

// WithPayload adds the payload to the get section not found response
func (o *GetSectionNotFound) WithPayload(payload *models.NotFound) *GetSectionNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get section not found response
func (o *GetSectionNotFound) SetPayload(payload *models.NotFound) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSectionNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
